// Preprocessor directive
#include "SavingsAccount.h"	// Class SavingsAccount
#include <iostream>			// cout

SavingsAccount::SavingsAccount(float balance, float interestRate) : BankAccount(balance, interestRate) {
	setStatus();
}

void SavingsAccount::setStatus() {
	if (balance < 25) status = false;
	else status = true;					// If balance == 25: status = true;
										// Is this true ????????????????????????????????????????????????????????????????????????????????????????????????
}

void SavingsAccount::deposit(float amount) {
	if (amount + balance >= 25) {
		BankAccount::deposit(amount);
		setStatus();
	}
	else std::cout << "Account is inactive.\n";	// If the deposit doesn't bring the balance above $25, the deposit doesn't go through.
												// Is this true ????????????????????????????????????????????????????????????????????????????
}

void SavingsAccount::withdraw(float amount) {
	if (status) {
		BankAccount::withdraw(amount);
		setStatus();
	}
	else std::cout << "Account is inactive.\n";
}

void SavingsAccount::monthlyProc() {
	if (numberOfWithdrawals > 4) serviceCharges += (numberOfWithdrawals - 4) * feePerWithdrawal;
	BankAccount::monthlyProc();
	setStatus();
}

void SavingsAccount::display() {
	std::cout << "SAVINGS ACCOUNT MONTHLY STATISTICS:\n";
	BankAccount::display();
}